* What happens when you initialize a repository? Why do you need to do it?

You add a (hidden) folder to the repository called .git. This makes the repository
suitable for all git-connected commands (I suppose)




* How is the staging area different from the working directory and the repository? What value do you think it offers?

- The working directory is the folder in which you keep your files.
- The repository is the hidden .git-folder in your working directory. You can commit files from the working directory to the repository. These files will be available offline and online in git.
- The staging area is an intermediate between the working directory and the repository. You can add files (git add) to the staging area. The added files can be commited to the git-repository.

By using a staging area, you can choose which files to commit (seperately or together) to the repository. You can choose NOT to commit all files from the working directory all in the same time, 
but clustered, or file by file. Maybe in this way you can first add/commit files that you know for sure are working correctly, and then add the ones of which you are not sure they work one by one




* How can you use the staging area to make sure you have one commit per logical change?

By adding one file at a time to commit. You can choose the file you want to commit,
so not to commit all files with changes that you may have forgotten about. 
Better to keep track of seperate changes.




* What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Some parts of a project (info pages, classes that are finished, experimental 
feautures, add-ons) that are not part of your main branch of development 
can be stored like this and tweaked with, without interfering or polluting
your main commits.




* How do the diagrams help you visualize the branch structure?

By visualizing it, and therefore making it easier to see at which stage certain branches were still together and share certain features.




* What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

All the commits made in the two seperate branches are now reachable through the new master-branch log.




* What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Pro: it can save you A LOT of time
Con: if more people are working on the same branch, git probably finds many merging conflicts. These need to be resolved manually anyway.